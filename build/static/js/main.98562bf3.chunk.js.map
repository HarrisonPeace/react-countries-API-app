{"version":3,"sources":["components/header.js","components/home/custom-select/custom-select.js","components/home/custom-select/items-per-page.js","components/home/search-form.js","components/home/pagination.js","components/home/custom-select/filter-by-region.js","components/loading.js","components/helpers/filter-results.js","components/helpers/format-results.js","components/home/index.js","components/error/not-found.js","components/country-detail.js","components/error/error.js","components/error/error-boundary.js","App.js","reportWebVitals.js","index.js"],"names":["Header","root","document","documentElement","currentStyles","colorSchemes","window","matchMedia","matches","style","cssText","to","onClick","width","height","viewBox","id","xmlns","d","CustomSelect","selectOptions","selectedAction","customSelect","useRef","selectedContainer","optionsContainer","addEventListener","e","target","closest","current","classList","add","className","ref","toggle","placeholder","version","x","y","options","map","option","innerHTML","optionClicked","queryString","require","PerPage","query","history","useHistory","ItemsPerPage","perPage","page","push","pathname","search","stringify","SearchForm","useState","searchTerm","setSearchTerm","onSubmit","preventDefault","toLowerCase","type","fill","name","required","value","onChange","Pages","totalPages","pageButtonsState","setPageButtonsState","svgButtonsState","setSvgButtonsState","setSVGButtons","useCallback","svgArray","pageButtonArray","useEffect","pageButtons","i","createSVG","JSON","parse","svgButtons","location","parseInt","setPageButtons","direction","nodeName","pageContainerClick","pageButton","FilterByRegion","region","path","Loading","filterResults","data","filteredData","filter","country","includes","formatResults","setTotalPages","resultsPP","TotalPages","Math","ceil","length","formattedData","startSlice","endSlice","tempData","slice","Index","useLocation","setFormattedData","alpha3Code","src","flag","alt","population","capital","NotFound","countryCode","useParams","countryData","goBack","nativeName","subregion","topLevelDomain","currencies","currency","a","languages","language","borders","border","borderData","Error","ErrorBoundary","props","state","hasError","this","children","error","Component","App","results","setResults","setError","axios","get","then","response","catch","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.98562bf3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n//Header Component\r\nconst Header = () => {\r\n  const root = document.documentElement;\r\n  let currentStyles = null;\r\n\r\n  //Set color schemes\r\n  let colorSchemes = {\r\n    light: `\r\n  --elements-color: hsl(0, 0%, 100%);\r\n  --background-color: hsl(0, 0%, 98%);\r\n  --text-color: hsl(200, 15%, 8%);\r\n  --input-color: hsl(0, 0%, 52%);\r\n  --search-button: hsl(0, 0%, 52%);\r\n  --box-shadow: hsl(0, 0%, 52%);`,\r\n    dark: `\r\n  --elements-color: hsl(209, 23%, 22%);\r\n  --background-color: hsl(207, 26%, 17%);\r\n  --text-color: hsl(0, 0%, 100%);\r\n  --input-color: hsl(207, 26%, 17%);\r\n  --search-button: hsl(0, 0%, 100%);\r\n  --box-shadow: hsl(207deg 38% 8%);`,\r\n  };\r\n\r\n  //Set color schemes depending on user preference\r\n  if (window.matchMedia(\"(prefers-color-scheme: dark)\").matches) {\r\n    root.style.cssText = colorSchemes.dark;\r\n    currentStyles = \"dark\";\r\n  } else {\r\n    root.style.cssText = colorSchemes.light;\r\n    currentStyles = \"light\";\r\n  }\r\n\r\n  //Change theme colors on click\r\n  const changeColorScheme = () => {\r\n    if (currentStyles === \"dark\") {\r\n      root.style.cssText = colorSchemes.light;\r\n      currentStyles = \"light\";\r\n    } else {\r\n      root.style.cssText = colorSchemes.dark;\r\n      currentStyles = \"dark\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <header>\r\n      <Link to=\"/\">\r\n        <h1>Where in the world?</h1>\r\n      </Link>\r\n      <div onClick={changeColorScheme}>\r\n        <svg\r\n          width=\"32px\"\r\n          height=\"32px\"\r\n          viewBox=\"0 0 32 32\"\r\n          id=\"icon\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n        >\r\n          <path d=\"M13.5 5.6c-1.9 8.1 3.1 16.2 11.2 18.1 0.1 0 0.2 0.1 0.4 0.1 -2.1 2.2-5 3.4-8 3.4 -0.1 0-0.3 0-0.4 0C10.6 27 5.8 21.8 6 15.7 6.2 11.1 9.2 7.1 13.5 5.6M15 3.2c-0.1 0-0.1 0-0.2 0C7.7 4.5 2.9 11.3 4.2 18.4c1.1 6.1 6.3 10.6 12.4 10.8 0.2 0 0.3 0 0.5 0 4.3 0 8.3-2.1 10.7-5.6 0.3-0.5 0.2-1.1-0.3-1.4 -0.1-0.1-0.3-0.2-0.5-0.2 -7.2-0.6-12.5-7-11.9-14.2 0.1-1.1 0.3-2.3 0.7-3.3 0.2-0.5-0.1-1.1-0.6-1.3C15.2 3.2 15.1 3.2 15 3.2z\" />\r\n        </svg>\r\n        <span>Dark Mode</span>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","/* \r\n-- Below code altered from w3schools\r\n-- I didn't use a HTML \"select\" element as the base so code would need to be adapted to work in a form\r\n-- @URL: https://www.w3schools.com/HOWTO/howto_custom_select.asp */\r\n\r\nimport React, { useRef } from \"react\";\r\n\r\n/**\r\n * @description A react function to create a return a custom select HTML object\r\n * @param selectOptions = an object to become the select options @object {id, placeholder, options}\r\n * @param selectedAction = a function to be called when a new option has been selected\r\n * @returns react component\r\n */\r\nfunction CustomSelect({ selectOptions, selectedAction }) {\r\n  const customSelect = useRef(null);\r\n  const selectedContainer = useRef(null);\r\n  const optionsContainer = useRef(null);\r\n\r\n  /**\r\n   * @description Event listener to close the custom select when a click occurs anywhere outside of it\r\n   * @param e = event object\r\n   */\r\n  window.addEventListener(\"click\", (e) => {\r\n    if (!e.target.closest(`#${selectOptions.id}`)) {\r\n      if (optionsContainer.current !== null) {\r\n        optionsContainer.current.classList.add(\"select-hide\");\r\n      }\r\n    } else {\r\n      return;\r\n    }\r\n  });\r\n\r\n  /**\r\n   * @description onClick function - sets the clicked option as the selected option\r\n   * @param e = event object\r\n   */\r\n  const optionClicked = (e) => {\r\n    selectedContainer.current.innerHTML = e.target.innerHTML;\r\n    optionsContainer.current.classList.add(\"select-hide\");\r\n    if (selectedAction) {\r\n      selectedAction(e.target.innerHTML);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * @description onClick function - opens and closes the select options box\r\n   * @param e = event object\r\n   */\r\n  const selectedContainerClick = (e) => {\r\n    optionsContainer.current.classList.toggle(\"select-hide\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"custom-select\" ref={customSelect} id={selectOptions.id}>\r\n      <div\r\n        ref={selectedContainer}\r\n        className=\"select-selected\"\r\n        onClick={(e) => selectedContainerClick(e)}\r\n      >\r\n        {selectOptions.placeholder}\r\n      </div>\r\n      <svg\r\n        version=\"1.1\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        x=\"0px\"\r\n        y=\"0px\"\r\n        viewBox=\"0 0 487 487\"\r\n      >\r\n        <path\r\n          d=\"M397.7,376.1c20.4,20.4,53.6,20.4,74,0s20.4-53.6,0-74L280.5,110.9c-20.4-20.4-53.6-20.4-74,0L15.3,302.1\r\n\t\tc-20.4,20.4-20.4,53.6,0,74s53.6,20.4,74,0l154.2-154.2L397.7,376.1z\"\r\n        />\r\n      </svg>\r\n\r\n      <div ref={optionsContainer} className=\"select-items select-hide\">\r\n        {selectOptions.options.map((option) => (\r\n          <div key={option} onClick={(e) => optionClicked(e)}>\r\n            {option}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CustomSelect;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n// Component Imports\r\nimport CustomSelect from \"./custom-select\";\r\nconst queryString = require(\"query-string\");\r\n\r\nfunction PerPage({ query }) {\r\n  //Create history reference\r\n  let history = useHistory();\r\n\r\n  const setItemsPerPage = (ItemsPerPage) => {\r\n    query.perPage = ItemsPerPage; //set how many items to show per page\r\n    query.page = 1; //set current page to 1 / otherwise user could be sent to a page that doesn't exist\r\n    history.push({\r\n      //push new items per page to be set on next update\r\n      pathname: \"/\",\r\n      search: queryString.stringify(query),\r\n    });\r\n  };\r\n\r\n  const selectOptions = {\r\n    //create custom select options\r\n    id: \"per-page\",\r\n    placeholder: \"Items per page\",\r\n    options: [\"12\", \"24\", \"48\"],\r\n  };\r\n\r\n  return (\r\n    <CustomSelect\r\n      selectOptions={selectOptions}\r\n      selectedAction={setItemsPerPage}\r\n    /> //create custom select\r\n  );\r\n}\r\n\r\nexport default PerPage;\r\n","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nconst queryString = require(\"query-string\");\n\nconst SearchForm = ({ query }) => {\n  //Create history reference\n  let history = useHistory();\n\n  //set State\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  /**\n   * @description handle form submit, on submit set query search term and push to history to update index component\n   */\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    query.search = searchTerm.toLowerCase();\n    history.push({\n      pathname: \"/\",\n      search: queryString.stringify(query),\n    });\n    setSearchTerm(\"\");\n  };\n\n  return (\n    <form className=\"search-form\" onSubmit={handleSubmit}>\n      <button type=\"submit\" className=\"search-button\">\n        <svg\n          fill=\"#fff\"\n          height=\"24\"\n          viewBox=\"0 0 23 23\"\n          width=\"24\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\" />\n          <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n        </svg>\n      </button>\n      <input\n        type=\"search\"\n        name=\"search\"\n        placeholder=\"Search for a country...\"\n        required\n        value={searchTerm}\n        onChange={(e) => setSearchTerm(e.target.value)}\n      />\n    </form>\n  );\n};\n\nexport default SearchForm;\n","import React, { useEffect, useState, useCallback } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst queryString = require(\"query-string\");\r\n\r\nfunction Pages({ query, totalPages }) {\r\n  //Create history reference\r\n  let history = useHistory();\r\n\r\n  //Create \"current\" page variable from query\r\n  let { page } = query;\r\n\r\n  //set state\r\n  const [pageButtonsState, setPageButtonsState] = useState(null);\r\n  const [svgButtonsState, setSvgButtonsState] = useState(null);\r\n\r\n  /**\r\n   * @description sets weather the arrow SVG(s) should be disabled/hidden or shown depending on the current page numbers shown\r\n   * @useCallBack is used so that the component is not re-rendered on every mount causing an infinite loop, only updates when total Pages changes\r\n   * @param svgArray = copy of the svgButtonsState array\r\n   * @param pageButtonArray = copy of the pageButtonsState array\r\n   * @Return svgArray\r\n   */\r\n  const setSVGButtons = useCallback(\r\n    (svgArray, pageButtonArray) => {\r\n      if (totalPages < 5) {\r\n        svgArray[0].className = \"disable-button\";\r\n        svgArray[1].className = \"disable-button\";\r\n      } else if (pageButtonArray[0].page === 1) {\r\n        svgArray[0].className = \"disable-button\";\r\n        svgArray[1].className = \"none\";\r\n      } else if (pageButtonArray[3].page !== \"...\") {\r\n        svgArray[0].className = \"none\";\r\n        svgArray[1].className = \"disable-button\";\r\n      } else {\r\n        svgArray[0].className = \"\";\r\n        svgArray[1].className = \"\";\r\n      }\r\n      return svgArray;\r\n    },\r\n    [totalPages]\r\n  );\r\n\r\n  /**\r\n   * @description sets pagination buttons and svg buttons on update / mount\r\n   */\r\n  useEffect(() => {\r\n    //create pagination button array\r\n    let pageButtons = [\r\n      {\r\n        id: \"page-button-0\",\r\n        className: {},\r\n        page,\r\n      },\r\n      {\r\n        id: \"page-button-1\",\r\n        className: {},\r\n        page,\r\n      },\r\n      {\r\n        id: \"page-button-2\",\r\n        className: {},\r\n        page,\r\n      },\r\n      {\r\n        id: \"page-button-3\",\r\n        className: {},\r\n        page,\r\n      },\r\n      {\r\n        id: \"page-button-4\",\r\n        className: {},\r\n        page,\r\n      },\r\n    ];\r\n\r\n    //create svg button array\r\n    let svgButtons = [\r\n      {\r\n        id: \"backwards\",\r\n        className: {},\r\n      },\r\n      {\r\n        id: \"forewords\",\r\n        className: {},\r\n      },\r\n    ];\r\n\r\n    //if there is less then 5 pages (show each page)\r\n    if (totalPages <= 5) {\r\n      //loop through all buttons and set there page number\r\n      for (let i = 0; i < 5; i++) {\r\n        if (i < totalPages) {\r\n          pageButtons[i].page = i + 1;\r\n          pageButtons[i].className = \"\";\r\n          if (i + 1 === page) {\r\n            //set current page class\r\n            pageButtons[i].className = \"current-page\";\r\n          }\r\n        } else {\r\n          //if no page hide the button\r\n          pageButtons[i].className = \"hide-button\";\r\n        }\r\n      }\r\n    } else {\r\n      //if there is more then 5 pages and the current page is not in the top 4 pages\r\n      if (page < totalPages - 4) {\r\n        //set second last button to \"\"...\"\" and remove hover state\r\n        pageButtons[3].page = \"...\";\r\n        pageButtons[3].className = \"no-hover\";\r\n        //set last button to the last page\r\n        pageButtons[4].page = totalPages;\r\n        //loop through remaining buttons setting the current page as item 0 and up from there\r\n        for (let i = 0; i < 3; i++) {\r\n          pageButtons[i].page = page + i;\r\n          pageButtons[i].className = \"\";\r\n        }\r\n        //set button 0 as current page\r\n        pageButtons[0].className = \"current-page\";\r\n      } else {\r\n        //if there is more then 5 pages and the current page is in the top 4 pages\r\n        //loop through all buttons and set there page number going backwards from the last page\r\n        for (let i = 0; i < 5; i++) {\r\n          pageButtons[4 - i].page = totalPages - i;\r\n          pageButtons[4 - i].className = \"\";\r\n          //set button of current page\r\n          if (pageButtons[4 - i].page === page) {\r\n            pageButtons[4 - i].className = \"current-page\";\r\n          }\r\n        }\r\n      }\r\n    }\r\n    //finally update state to be rendered to the page\r\n    setPageButtonsState(pageButtons);\r\n    setSvgButtonsState(setSVGButtons(svgButtons, pageButtons));\r\n  }, [\r\n    setPageButtonsState,\r\n    page,\r\n    totalPages,\r\n    setSvgButtonsState,\r\n    setSVGButtons,\r\n  ]);\r\n\r\n  /**\r\n   * @description awaits for button container to be clicked and then sets state to update the component\r\n   * @param e = event object\r\n   */\r\n  const pageContainerClick = (e) => {\r\n    //create a deep copy of each array object\r\n    let pageButtons = JSON.parse(JSON.stringify(pageButtonsState));\r\n    let svgButtons = JSON.parse(JSON.stringify(svgButtonsState));\r\n\r\n    //set page number clicked (if button and not SVG click)\r\n    let location = parseInt(e.target.innerHTML);\r\n\r\n    /**\r\n     * @description sets the page buttons to be shown *in most cases\r\n     * @param direction = either forewords or backwards depending on which svg is clicked\r\n     */\r\n    const setPageButtons = (direction) => {\r\n      //set last button to last page\r\n      pageButtons[4].page = totalPages;\r\n      //set second last button to \"...\" and remove hover state\r\n      pageButtons[3].page = \"...\";\r\n      pageButtons[3].className = \"no-hover\";\r\n      //loop through remaining buttons setting the current page as item 0 and up from there\r\n      for (let i = 0; i < 3; i++) {\r\n        //if backwards change all buttons by -1 others change all buttons by +1\r\n        direction === \"backwards\"\r\n          ? (pageButtons[i].page = pageButtons[i].page - 1)\r\n          : (pageButtons[i].page = pageButtons[i].page + 1);\r\n        //set button of current page if visible\r\n        if (pageButtons[i].page === page) {\r\n          pageButtons[i].className = \"current-page\";\r\n        } else {\r\n          pageButtons[i].className = \"\";\r\n        }\r\n      }\r\n    };\r\n\r\n    //only run on button click that isn't the current page or \"...\"\r\n    if (\r\n      e.target.nodeName === \"BUTTON\" &&\r\n      e.target.innerHTML !== \"...\" &&\r\n      location !== page\r\n    ) {\r\n      //push new page into history and update components\r\n      query.page = location;\r\n      history.push({\r\n        pathname: \"/\",\r\n        search: queryString.stringify(query),\r\n      });\r\n    } else if (e.target.nodeName === \"svg\" || e.target.nodeName === \"path\") {\r\n      //else if svg or svg path click\r\n      if (\r\n        e.target.id === \"forewords\" &&\r\n        svgButtons[1].className !== \"disable-button\"\r\n      ) {\r\n        if (pageButtons[0].page < totalPages - 5) {\r\n          //if pages are not the top 5 pages run setPageButtons function\r\n          setPageButtons(\"forewords\");\r\n        } else {\r\n          //loop through all buttons setting the last page as the last button and going backwards from there\r\n          for (let i = 0; i < 5; i++) {\r\n            pageButtons[4 - i].page = totalPages - i;\r\n            //set button of current page if visible\r\n            if (pageButtons[4 - i].page === page) {\r\n              pageButtons[4 - i].className = \"current-page\";\r\n            } else {\r\n              pageButtons[4 - i].className = \"\";\r\n            }\r\n          }\r\n        }\r\n      } else if (\r\n        e.target.id === \"backwards\" &&\r\n        svgButtons[0].className !== \"disable-button\"\r\n      ) {\r\n        if (pageButtons[0].page < totalPages - 3) {\r\n          //if pages are not the top 3 pages run setPageButtons function\r\n          setPageButtons(\"backwards\");\r\n        }\r\n      }\r\n    }\r\n\r\n    //finally update state to update component\r\n    setPageButtonsState(pageButtons);\r\n    setSvgButtonsState(setSVGButtons(svgButtons, pageButtons));\r\n  };\r\n\r\n  /**\r\n   * @description creates SVG element\r\n   * @param className = any CSS classes to be added to the svg\r\n   * @param id = a ID & key to be added to the svg\r\n   * @return SVG\r\n   */\r\n  const createSVG = (className, id) => (\r\n    <svg\r\n      className={className}\r\n      id={id}\r\n      key={id}\r\n      version=\"1.1\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      x=\"0px\"\r\n      y=\"0px\"\r\n      viewBox=\"0 0 487 487\"\r\n    >\r\n      <path\r\n        d=\"M397.7,376.1c20.4,20.4,53.6,20.4,74,0s20.4-53.6,0-74L280.5,110.9c-20.4-20.4-53.6-20.4-74,0L15.3,302.1\r\n  c-20.4,20.4-20.4,53.6,0,74s53.6,20.4,74,0l154.2-154.2L397.7,376.1z\"\r\n      />\r\n    </svg>\r\n  );\r\n\r\n  //if there is only 1 page return (render)nothing\r\n  if (pageButtonsState === null || totalPages <= 1) {\r\n    return null;\r\n  } else {\r\n    return (\r\n      <div onClick={(e) => pageContainerClick(e)} className=\"buttons-container\">\r\n        {createSVG(svgButtonsState[0].className, svgButtonsState[0].id)}\r\n        {/* Loop through buttons array and create a jsx element for each*/}\r\n        {pageButtonsState.map((pageButton) => (\r\n          <button className={pageButton.className} key={pageButton.id}>\r\n            {pageButton.page}\r\n          </button>\r\n        ))}\r\n        {createSVG(svgButtonsState[1].className, svgButtonsState[1].id)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Pages;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n// Component Imports\r\nimport CustomSelect from \"./custom-select\";\r\nconst queryString = require(\"query-string\");\r\n\r\nfunction FilterByRegion({ query }) {\r\n  //Create history reference\r\n  let history = useHistory();\r\n\r\n  const selectRegion = (region) => {\r\n    query.search = \"\"; //on selecting a region remove any search terms to avoid returning zero results\r\n\r\n    if (region === \"Show All\") {\r\n      //send user to home page\r\n      query.region = \"\";\r\n      history.push({\r\n        path: \"/\",\r\n        search: queryString.stringify(query),\r\n      });\r\n    } else {\r\n      query.region = region.toLowerCase(); //add region to query string to be filtered out on next update\r\n      history.push({\r\n        path: \"/\",\r\n        search: queryString.stringify(query),\r\n      });\r\n    }\r\n  };\r\n\r\n  const selectOptions = {\r\n    //create custom select options\r\n    id: \"filter-by-region\",\r\n    placeholder: \"Filter by region\",\r\n    options: [\"Africa\", \"America\", \"Asia\", \"Europe\", \"Oceania\", \"Show All\"],\r\n  };\r\n\r\n  return (\r\n    <CustomSelect selectOptions={selectOptions} selectedAction={selectRegion} /> //create custom select\r\n  );\r\n}\r\n\r\nexport default FilterByRegion;\r\n","import React from \"react\";\r\n\r\nfunction Loading() {\r\n  return (\r\n    <div id=\"loading-container\">\r\n      <h2>Loading...</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Loading;\r\n","/**\r\n * @description Filters data by a given search term and/or a region.\r\n * @param data = data received from the country API in (array)\r\n * @param search = search term provided by search from and query string (string)\r\n * @param region = region (asia, america etc) provided by region custome select and query string (string)\r\n * @Return filtered data\r\n */\r\nfunction filterResults(data, search, region) {\r\n  let filteredData;\r\n  if (region && search) {\r\n    filteredData = data\r\n      .filter((country) => country.region.toLowerCase().includes(region))\r\n      .filter((country) => country.name.toLowerCase().includes(search));\r\n  } else if (region) {\r\n    filteredData = data.filter((country) =>\r\n      country.region.toLowerCase().includes(region)\r\n    );\r\n  } else if (search) {\r\n    filteredData = data.filter((country) =>\r\n      country.name.toLowerCase().includes(search)\r\n    );\r\n  } else {\r\n    return data;\r\n  }\r\n  return filteredData;\r\n}\r\n\r\nexport default filterResults;\r\n","/**\r\n * @description formats data into page format - determined by page length and page number\r\n * @param filteredData = data received from the country API which has been passed through the filter-results function (array)\r\n * @param setTotalPages = function to set the TotalPages of the document - found by dividing filteredData length by results to show per page (function)\r\n * @param resultsPP = total results (countries) to show on each page of the website\r\n * @Return formatted data\r\n */\r\nfunction formatResults(filteredData, setTotalPages, resultsPP) {\r\n  let TotalPages = Math.ceil(filteredData.length / resultsPP);\r\n  let formattedData = [];\r\n\r\n  //loop through data a split into pages\r\n  for (let i = 0; i < TotalPages; i++) {\r\n    let startSlice = i * resultsPP;\r\n    let endSlice = (i + 1) * resultsPP;\r\n    let tempData = filteredData.slice(startSlice, endSlice);\r\n    formattedData.push(tempData);\r\n  }\r\n\r\n  setTotalPages(TotalPages);\r\n\r\n  return formattedData;\r\n}\r\n\r\nexport default formatResults;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useLocation, Link } from \"react-router-dom\";\r\n\r\n// Component Imports\r\nimport PerPage from \"./custom-select/items-per-page\";\r\nimport SearchFrom from \"./search-form\";\r\nimport Pages from \"./pagination\";\r\nimport FilterByRegion from \"./custom-select/filter-by-region\";\r\nimport Loading from \"../loading\";\r\n\r\n// helper Imports\r\nimport filterResults from \"../helpers/filter-results\";\r\nimport formatResults from \"../helpers/format-results\";\r\n\r\nconst queryString = require(\"query-string\");\r\n\r\nconst Index = ({ data }) => {\r\n  //Create location reference\r\n  let location = useLocation();\r\n\r\n  const query = queryString.parse(location.search); //get query string from URL turn it into an object\r\n  query.perPage = parseInt(query.perPage || 12); //turn perPage into number or 12\r\n  query.page = parseInt(query.page || 1); //turn \"current\" page into number or \"page\" 1\r\n  let { search, region, perPage, page } = query; //create variables for each query parameter\r\n\r\n  const [totalPages, setTotalPages] = useState(1);\r\n  const [formattedData, setFormattedData] = useState(null);\r\n\r\n  /**\r\n   * @description filter and format the data to be show on the page by passing it through both the filterResults and formatResults helpers (see individual scripts for how these work)\r\n   * @Return sets FormattedData state\r\n   */\r\n  useEffect(() => {\r\n    let filteredData = filterResults(data, search, region);\r\n    setFormattedData(formatResults(filteredData, setTotalPages, perPage));\r\n  }, [data, region, perPage, search]);\r\n\r\n  //if useEffect has not worked yet (initial mount) return loading\r\n  if (formattedData === null) {\r\n    return <Loading />;\r\n  } else {\r\n    return (\r\n      <main>\r\n        <div id=\"search-options-container\">\r\n          <SearchFrom query={query} />\r\n          <div id=\"options-bar-container\">\r\n            <PerPage query={query} />\r\n            <FilterByRegion query={query} />\r\n          </div>\r\n        </div>\r\n        {formattedData.length === 0 ? (\r\n          <div className=\"not-found-error-container\">\r\n            <h2>Sorry no results where found</h2>\r\n            <p>Please try again.</p>\r\n          </div>\r\n        ) : (\r\n          <>\r\n            <div className=\"countries-container\">\r\n              {/* -- Map over all countries in the formatted results array and create a JSX element  */}\r\n              {formattedData[page - 1].map((country) => (\r\n                <div className=\"country-container\" key={country.name}>\r\n                  <Link to={`/country/${country.alpha3Code.toLowerCase()}`}>\r\n                    <img src={country.flag} alt={`${country.name}'s Flag`} />\r\n                    <div className=\"text-container\">\r\n                      <h1>{country.name}</h1>\r\n                      <span>\r\n                        <span>Population:</span> {country.population}\r\n                      </span>\r\n                      <span>\r\n                        <span>Region:</span> {country.region}\r\n                      </span>\r\n                      <span>\r\n                        <span>Capital:</span> {country.capital}\r\n                      </span>\r\n                    </div>\r\n                  </Link>\r\n                </div>\r\n              ))}\r\n            </div>\r\n            <Pages query={query} totalPages={totalPages} />\r\n          </>\r\n        )}\r\n      </main>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Index;\r\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst NotFound = () => {\n  return (\n    <main className=\"not-found-error-container\">\n      <h2>Page Not Found</h2>\n      <p>Sorry! We couldn't find the page you're looking for.</p>\n      <Link className=\"stand-alone-button\" to=\"/\">\n        Return Home\n      </Link>\n    </main>\n  );\n};\n\nexport default NotFound;\n","import React from \"react\";\r\nimport { useParams, Link, useHistory } from \"react-router-dom\";\r\nimport NotFound from \"./error/not-found\";\r\n\r\n//Index Component\r\nconst Index = ({ data }) => {\r\n  //Create history reference\r\n  let history = useHistory();\r\n\r\n  //get country alpha3Code from url\r\n  let { countryCode } = useParams();\r\n\r\n  //filter through data and find matching country\r\n  let countryData = data.filter((country) =>\r\n    country.alpha3Code.toLowerCase().includes(countryCode)\r\n  )[0];\r\n\r\n  //return not found component if no country found\r\n  if (!countryData) {\r\n    return <NotFound />;\r\n  } else {\r\n    return (\r\n      <main id=\"country-details-container\">\r\n        <button className=\"stand-alone-button\" onClick={() => history.goBack()}>\r\n          <svg\r\n            version=\"1.1\"\r\n            id=\"Layer_1\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            x=\"0px\"\r\n            y=\"0px\"\r\n            viewBox=\"0 0 330 330\"\r\n          >\r\n            <path\r\n              id=\"XMLID_29_\"\r\n              d=\"M100.606,100.606L150,51.212V315c0,8.284,6.716,15,15,15c8.284,0,15-6.716,15-15V51.212l49.394,49.394\r\n          C232.322,103.535,236.161,105,240,105c3.839,0,7.678-1.465,10.606-4.394c5.858-5.857,5.858-15.355,0-21.213l-75-75\r\n          c-5.857-5.858-15.355-5.858-21.213,0l-75,75c-5.858,5.857-5.858,15.355,0,21.213C85.251,106.463,94.749,106.463,100.606,100.606z\"\r\n            />\r\n          </svg>\r\n          Back\r\n        </button>\r\n        <img src={countryData.flag} alt={`${countryData.name}'s Flag`} />\r\n        <div className=\"text-container\">\r\n          <h1>{countryData.name}</h1>\r\n          <div>\r\n            <span>\r\n              <span>Native Name:</span> {countryData.nativeName}\r\n            </span>\r\n            <span>\r\n              <span>Population:</span> {countryData.population}\r\n            </span>\r\n            <span>\r\n              <span>Region:</span> {countryData.region}\r\n            </span>\r\n            <span>\r\n              <span>Sub Region:</span> {countryData.subregion}\r\n            </span>\r\n            <span>\r\n              <span>Capital:</span> {countryData.capital}\r\n            </span>\r\n          </div>\r\n          <div className=\"container-margin-top\">\r\n            <span>\r\n              <span>Top Level Domain:</span> {countryData.topLevelDomain[0]}\r\n            </span>\r\n            <span>\r\n              <span>Currencies:</span>{\" \"}\r\n              {/* map of the country's currency's and return in JSX format */}\r\n              {countryData.currencies.map((currency, i, a) => {\r\n                if (a.length === 0 || i === a.length - 1) return currency.name;\r\n                else return `${currency.name}, `;\r\n              })}\r\n            </span>\r\n            <span>\r\n              <span>Languages:</span>\r\n              {/* map of the country's languages and return in JSX format */}\r\n              {countryData.languages.map((language, i, a) => {\r\n                if (a.length === 0 || i === a.length - 1) return language.name;\r\n                else return `${language.name}, `;\r\n              })}\r\n            </span>\r\n          </div>\r\n          <div className=\"container-margin-top\">\r\n            <span>\r\n              <span>Border Countries:</span>\r\n            </span>\r\n            <div className=\"border-countries-container\">\r\n              {/* if the country has borders map over them returning a Link element */}\r\n              {countryData.borders[0]\r\n                ? countryData.borders.map((border, i, a) => {\r\n                    let borderData = data.filter((country) =>\r\n                      country.alpha3Code.includes(border)\r\n                    )[0];\r\n                    return (\r\n                      <Link\r\n                        key={`button-${borderData.alpha3Code}`}\r\n                        className=\"border-button\"\r\n                        to={`/country/${borderData.alpha3Code.toLowerCase()}`}\r\n                      >\r\n                        {borderData.name || \"N/A\"}\r\n                      </Link>\r\n                    );\r\n                  })\r\n                : \"N/A\"}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </main>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Index;\r\n","import React from \"react\";\n\nconst Error = () => {\n  return (\n    <main className=\"not-found-error-container\">\n      <h2>Error</h2>\n      <p>Sorry! An unexpected error just occurred, please try again.</p>\n    </main>\n  );\n};\n\nexport default Error;\n","/**\r\n * Error Boundary to catch react component mounting and other react errors\r\n */\r\nimport React, { Component } from \"react\";\r\n\r\n// Component Imports\r\nimport Error from \"./error\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n\r\n  static getDerivedStateFromError(error) {\r\n    // Update state so the next render will show the fallback UI.\r\n    return { hasError: true };\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <Error />; //if error show Error page\r\n    } else return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport Header from \"./components/header\";\nimport Home from \"./components/home\";\nimport Country from \"./components/country-detail\";\nimport Loading from \"./components/loading\";\nimport Error from \"./components/error/error\";\nimport NotFound from \"./components/error/not-found\";\nimport ErrorBoundary from \"./components/error/error-boundary\";\n\nfunction App() {\n  let [results, setResults] = useState(null);\n  let [error, setError] = useState(null);\n\n  useEffect(() => {\n    axios\n      .get(`https://restcountries.eu/rest/v2/all`)\n      .then((response) => setResults(response))\n      .catch((e) => setError(true));\n  }, []);\n\n  return (\n    <Router>\n      <Header />\n      <ErrorBoundary>\n        {error ? (\n          <Error />\n        ) : (\n          <>\n            {results === null ? (\n              <Loading />\n            ) : (\n              <Switch>\n                <Route exact path=\"/\">\n                  {\" \"}\n                  <Home data={results.data} />{\" \"}\n                </Route>\n                <Route path=\"/country/:countryCode\">\n                  {\" \"}\n                  <Country data={results.data} />{\" \"}\n                </Route>\n                <Route exact path=\"/\">\n                  {\" \"}\n                  <Home data={results.data} />{\" \"}\n                </Route>\n                <Route>\n                  {\" \"}\n                  <NotFound />{\" \"}\n                </Route>\n              </Switch>\n            )}\n          </>\n        )}\n      </ErrorBoundary>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n//Import Components\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n//Import CSS\nimport \"./css/styles.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}